# generated by fastapi-codegen:
#   filename:  specs.yaml
#   timestamp: 2022-03-16T01:02:23+00:00

from __future__ import annotations

from typing import List, Union

from fastapi import FastAPI

from .models import (
    App,
    Login,
    Password,
    PasswordChange,
    PasswordResetConfirm,
    Plan,
    Signup,
    Subscription,
    UserDetails,
    VerifyEmail,
)

app = FastAPI(
    title='Hiring Example API',
    description='API documentation for Hiring Example App',
    version='v1',
    servers=[{'url': 'https://hiring-example-25770.botics.co/'}],
)


@app.get('/api/v1/apps/', response_model=List[App])
def api_v1_apps_list() -> List[App]:
    pass


@app.post('/api/v1/apps/', response_model=None, responses={'201': {'model': App}})
def api_v1_apps_create(body: App) -> Union[None, App]:
    pass


@app.get('/api/v1/apps/{id}/', response_model=App)
def api_v1_apps_read(id: int) -> App:
    pass


@app.put('/api/v1/apps/{id}/', response_model=App)
def api_v1_apps_update(id: int, body: App = ...) -> App:
    pass


@app.patch('/api/v1/apps/{id}/', response_model=App)
def api_v1_apps_partial_update(id: int, body: App = ...) -> App:
    pass


@app.delete('/api/v1/apps/{id}/', response_model=None)
def api_v1_apps_delete(id: int) -> None:
    pass


@app.get('/api/v1/plans/', response_model=List[Plan])
def api_v1_plans_list() -> List[Plan]:
    pass


@app.get('/api/v1/plans/{id}/', response_model=Plan)
def api_v1_plans_read(id: int) -> Plan:
    pass


@app.get('/api/v1/subscriptions/', response_model=List[Subscription])
def api_v1_subscriptions_list() -> List[Subscription]:
    pass


@app.post(
    '/api/v1/subscriptions/',
    response_model=None,
    responses={'201': {'model': Subscription}},
)
def api_v1_subscriptions_create(body: Subscription) -> Union[None, Subscription]:
    pass


@app.get('/api/v1/subscriptions/{id}/', response_model=Subscription)
def api_v1_subscriptions_read(id: int) -> Subscription:
    pass


@app.put('/api/v1/subscriptions/{id}/', response_model=Subscription)
def api_v1_subscriptions_update(id: int, body: Subscription = ...) -> Subscription:
    pass


@app.patch('/api/v1/subscriptions/{id}/', response_model=Subscription)
def api_v1_subscriptions_partial_update(
    id: int, body: Subscription = ...
) -> Subscription:
    pass


@app.post('/rest-auth/login/', response_model=None, responses={'201': {'model': Login}})
def rest_auth_login_create(body: Login) -> Union[None, Login]:
    pass


@app.get('/rest-auth/logout/', response_model=None)
def rest_auth_logout_list() -> None:
    """
        Calls Django logout method and delete the Token object
    assigned to the current User object.
    """
    pass


@app.post('/rest-auth/logout/', response_model=None)
def rest_auth_logout_create() -> None:
    """
        Calls Django logout method and delete the Token object
    assigned to the current User object.
    """
    pass


@app.post(
    '/rest-auth/password/change/',
    response_model=None,
    responses={'201': {'model': PasswordChange}},
)
def rest_auth_password_change_create(
    body: PasswordChange,
) -> Union[None, PasswordChange]:
    """
    Calls Django Auth SetPasswordForm save method.
    """
    pass


@app.post(
    '/rest-auth/password/reset/',
    response_model=None,
    responses={'201': {'model': Password}},
)
def rest_auth_password_reset_create(body: Password) -> Union[None, Password]:
    """
    Calls Django Auth PasswordResetForm save method.
    """
    pass


@app.post(
    '/rest-auth/password/reset/confirm/',
    response_model=None,
    responses={'201': {'model': PasswordResetConfirm}},
)
def rest_auth_password_reset_confirm_create(
    body: PasswordResetConfirm,
) -> Union[None, PasswordResetConfirm]:
    """
        Password reset e-mail link is confirmed, therefore
    this resets the user's password.
    """
    pass


@app.post(
    '/rest-auth/registration/',
    response_model=None,
    responses={'201': {'model': Signup}},
)
def rest_auth_registration_create(body: Signup) -> Union[None, Signup]:
    pass


@app.post(
    '/rest-auth/registration/verify-email/',
    response_model=None,
    responses={'201': {'model': VerifyEmail}},
)
def rest_auth_registration_verify_email_create(
    body: VerifyEmail,
) -> Union[None, VerifyEmail]:
    pass


@app.get('/rest-auth/user/', response_model=UserDetails)
def rest_auth_user_read() -> UserDetails:
    """
        Reads and updates UserModel fields
    Accepts GET, PUT, PATCH methods.
    """
    pass


@app.put('/rest-auth/user/', response_model=UserDetails)
def rest_auth_user_update(body: UserDetails) -> UserDetails:
    """
        Reads and updates UserModel fields
    Accepts GET, PUT, PATCH methods.
    """
    pass


@app.patch('/rest-auth/user/', response_model=UserDetails)
def rest_auth_user_partial_update(body: UserDetails) -> UserDetails:
    """
        Reads and updates UserModel fields
    Accepts GET, PUT, PATCH methods.
    """
    pass
